#include <iostream>
#include <vector>
#include <unordered_set>
#include <limits>

using namespace std;

// 1. Функция для подсчета похожих строк
void countSimilarRowsTask() 
{
    cout << "\n=== Задание 1: Подсчет строк, похожих на первую ===\n";

    int M_1, N_1;
    cout << "Введите количество строк (M) и столбцов (N) матрицы: ";
    cin >> M_1 >> N_1;

    if (M_1 <= 0 || N_1 <= 0) 
    {
        cerr << "Ошибка: M и N должны быть положительными числами!\n";
        return;
    }

    vector<vector<int>> matrix(M_1, vector<int>(N_1));

    cout << "Введите элементы матрицы (числа от 0 до 100):\n";
    for (int i = 0; i < M_1; ++i) 
    {
        for (int j = 0; j < N_1; ++j) 
        {
            while (!(cin >> matrix[i][j])) 
            {
                cerr << "Ошибка ввода! Введите число от 0 до 100: ";
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
            }
            if (matrix[i][j] < 0 || matrix[i][j] > 100) 
            {
                cerr << "Число должно быть от 0 до 100! Повторите ввод: ";
                j--;
            }
        }
    }

    if (matrix.empty()) 
    {
        cout << "Матрица пуста!\n";
        return;
    }

    // Создаем множество элементов первой строки
    unordered_set<int> firstRowSet(matrix[0].begin(), matrix[0].end());
    int count = 0;

    // Сравниваем начиная со второй строки (индекс 1)
    for (size_t i = 1; i < matrix.size(); ++i) 
    {
        unordered_set<int> currentRowSet(matrix[i].begin(), matrix[i].end());
        if (currentRowSet == firstRowSet) 
        {
            count++;
        }
    }

    cout << "Количество строк, похожих на первую: " << count << "\n";
}

// 2. Функция для обмена половин
void swapMatrixHalvesTask() 
{
    cout << "\n=== Задание 2: Обмен левой и правой половин матрицы ===\n";

    int M_2, N_2;
    cout << "Введите количество строк (M) и столбцов (N, должно быть четным): ";
    cin >> M_2 >> N_2;

    if (M_2 <= 0 || N_2 <= 0) 
    {
        cerr << "Ошибка: M и N должны быть положительными числами!\n";
        return;
    }

    if (N_2 % 2 != 0) 
    {
        cerr << "Ошибка: N должно быть четным числом!\n";
        return;
    }

    vector<vector<int>> matrix(M_2, vector<int>(N_2));

    cout << "Введите элементы матрицы:\n";
    for (int i = 0; i < M_2; ++i) 
    {
        for (int j = 0; j < N_2; ++j) 
        {
            cin >> matrix[i][j];
        }
    }

    cout << "\nИсходная матрица:\n";
    for (const auto& row : matrix) 
    {
        for (int num : row) cout << num << " ";
        cout << "\n";
    }

    int half = N_2 / 2;
    for (int i = 0; i < M_2; ++i) 
    {
        for (int j = 0; j < half; ++j) 
        {
            swap(matrix[i][j], matrix[i][j + half]);
        }
    }

    cout << "\nМатрица после обмена половин:\n";
    for (const auto& row : matrix) 
    {
        for (int num : row) cout << num << " ";
        cout << "\n";
    }
}

int main() 
{
    setlocale(LC_ALL, "rus");
    int choice;

    do 
    {
        cout << "\nВыберите задание:\n"
            << "1. Подсчет строк, похожих на первую\n"
            << "2. Обмен левой и правой половин матрицы\n"
            << "0. Выход\n"
            << "Ваш выбор: ";
        cin >> choice;

        switch (choice) 
        {
        case 1:
            countSimilarRowsTask();
            break;
        case 2:
            swapMatrixHalvesTask();
            break;
        case 0:
            cout << "Выход из программы.\n";
            break;
        default:
            cout << "Неверный выбор! Попробуйте еще раз.\n";
        }
    } while (choice != 0);

    return 0;
}
