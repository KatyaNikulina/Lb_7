#include <iostream>
#include <vector>
#include <unordered_set>
#include <limits>

using namespace std;

// 1. Функція для підрахунку схожих строк
void countSimilarRowsTask()
{
    cout << "\n=== Task 1: Counting lines similar to the first one ===\n";

    int M_1, N_1;
    cout << "Enter the number of rows (M) and columns (N) of the matrix: ";
    cin >> M_1 >> N_1;

    if (M_1 <= 0 || N_1 <= 0)
    {
        cerr << "Error: M and N must be positive numbers!\n";
        return;
    }

    vector<vector<int>> matrix(M_1, vector<int>(N_1));

    cout << "Enter the matrix elements (numbers from 0 to 100):\n";
    for (int i = 0; i < M_1; ++i)
    {
        for (int j = 0; j < N_1; ++j)
        {
            while (!(cin >> matrix[i][j]))
            {
                cerr << "Input error! Enter a number between 0 and 100: ";
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
            }
            if (matrix[i][j] < 0 || matrix[i][j] > 100)
            {
                cerr << "The number must be between 0 and 100! Repeat input: ";
                j--;
            }
        }
    }

    if (matrix.empty())
    {
        cout << "The matrix is ​​empty!\n";
        return;
    }

    // Створюємо множину елементів першої строки
    unordered_set<int> firstRowSet(matrix[0].begin(), matrix[0].end());
    int count = 0;

    // Зрівнюємо, починаючи з другої строки (індекс 1)
    for (size_t i = 1; i < matrix.size(); ++i)
    {
        unordered_set<int> currentRowSet(matrix[i].begin(), matrix[i].end());
        if (currentRowSet == firstRowSet)
        {
            count++;
        }
    }

    cout << "Number of lines similar to the first: " << count << "\n";
}

// 2. Функція для обміну половин
void swapMatrixHalvesTask()
{
    cout << "\n=== Task 2: Exchange of the left and right halves of the matrix ===\n";

    int M_2, N_2;
    cout << "Enter the number of rows (M) and columns (N, must be even): ";
    cin >> M_2 >> N_2;

    if (M_2 <= 0 || N_2 <= 0)
    {
        cerr << "Error: M and N must be positive numbers!\n";
        return;
    }

    if (N_2 % 2 != 0)
    {
        cerr << "Error: N must be an even number!\n";
        return;
    }

    vector<vector<int>> matrix(M_2, vector<int>(N_2));

    cout << "Enter the elements of the matrix:\n";
    for (int i = 0; i < M_2; ++i)
    {
        for (int j = 0; j < N_2; ++j)
        {
            cin >> matrix[i][j];
        }
    }

    cout << "\nOriginal matrix:\n";
    for (const auto& row : matrix)
    {
        for (int num : row) cout << num << " ";
        cout << "\n";
    }

    int half = N_2 / 2;
    for (int i = 0; i < M_2; ++i)
    {
        for (int j = 0; j < half; ++j)
        {
            swap(matrix[i][j], matrix[i][j + half]);
        }
    }

    cout << "\nMatrix after swapping halves:\n";
    for (const auto& row : matrix)
    {
        for (int num : row) cout << num << " ";
        cout << "\n";
    }
}

int main()
{
    int choice;

    do
    {
        cout << "\nSelect a task:\n"
            << "1. Count rows similar to the first\n"
            << "2. Swap the left and right halves of the matrix\n"
            << "0. Exit\n"
            << "Your choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            countSimilarRowsTask();
            break;
        case 2:
            swapMatrixHalvesTask();
            break;
        case 0:
            cout << "Exiting the program.\n";
            break;
        default:
            cout << "Wrong choice! Try again.\n";
        }
    } while (choice != 0);

    return 0;
}
